on:
  issues: 
    types: [labeled, unlabeled]
  push:
  workflow_dispatch:
    inputs:
      issue:
        description: 'Issue number to work with'
        required: true
        default: '11'
    
jobs:
  find-action-name:
    runs-on: ubuntu-latest
    #if: github.event.label.name == 'security-check'

    env:
      body: ${{ github.event.issue.body }}

    outputs:
      action: ${{ steps.get-action.outputs.action }}
      owner: ${{ steps.get-action.outputs.owner }}
      name: ${{ steps.get-action.outputs.name }}
      request_owner: ${{ steps.get-action.outputs.request_owner }}
      request_repo: ${{ steps.get-action.outputs.request_repo }}
      request_issue: ${{ steps.get-action.outputs.request_issue }}

    steps:
    - uses: actions/github-script@v5
      name: Find action from comment
      id: get-action
      with:
        result-encoding: string
        script: |
            console.log(`::set-output name=action::wei/curl`)
            console.log(`::set-output name=owner::wei`)
            console.log(`::set-output name=name::curl`)
      
            console.log(`::set-output name=request_owner::rajbos`)            
            console.log(`::set-output name=request_repo::github-actions-requests`)
            console.log(`::set-output name=request_issue::10`)
    
  check-action-security-setup:
    runs-on: ubuntu-latest
    needs: find-action-name
    steps:
    - name: Check-out actions-request repo
      uses: actions/checkout@v2

    - name: Check-out referenced Action
      run: |
        git clone https://github.com/${{ needs.find-action-name.outputs.action }} action

    - name: Check for .github and workflows folder
      id: scan
      run: .github/security-scan.sh
      env:
        ACTION: ${{ needs.find-action-name.outputs.action }}
        
    - name: Update comment with results
      run: .github/update-issue-comment.sh
      env:
        HAS_GITHUB_FOLDER: ${{ steps.scan.outputs.has_github_folder }}
        HAS_WORKFLOWS_FOLDER: ${{ steps.scan.outputs.has_workflows_folder }}
        HAS_DEPENDABOT_CONFIGURATION: ${{ steps.scan.outputs.has_dependabot_configuration }}
        HAS_CODEQL_INIT: ${{ steps.scan.outputs.has_codeql_init }}
        WORKFLOW_WITH_CODEQL_INIT: ${{ steps.scan.outputs.workflow_with_codeql_init }}
        HAS_CODEQL_ANALYZE: ${{ steps.scan.outputs.has_codeql_analyze }}
        WORKFLOW_WITH_CODEQL_ANALYZE: ${{ steps.scan.outputs.workflow_with_codeql_analyze }}
        ACTION_USES_DOCKER: ${{ steps.scan.outputs.action_uses_docker }}
        HAS_LOW_MEDIUM_ISSUES: ${{ steps.scan.outputs.has_low_medium_issues }}
        LOW_MEDIUM_ISSUES: ${{ steps.scan.outputs.low_medium_issues }}
        HAS_HIGH_CRITICAL_ISSUES: ${{ steps.scan.outputs.has_high_critical_issues }}
        HIGH_CRITICAL_ISSUES: ${{ steps.scan.outputs.high_critical_issues }}

    - name: Get result for verification
      run: |
        echo "Owner: ${{needs.find-action-name.outputs.owner}}"
        echo "Name: ${{needs.find-action-name.outputs.name}}"

    # todo: add a new comment to the issue indication the action of forking the repo over to the other org?

  fork-action-test:
    runs-on: ubuntu-latest
    needs: find-action-name
    steps:
    - uses: actions/checkout@v2

    - name: Fork the action repository to rajbos-actions-test
      uses: rajbos-actions/forker@v0.0.1
      with:
        token: ${{ secrets.GH_TOKEN }}
        repo: ${{needs.find-action-name.outputs.name}}
        owner: ${{needs.find-action-name.outputs.owner}}
        org: sahithi-org # todo: make central parameter

    # since dependabot alerts and dependency graph is enabled on the organization level, we only need to add a CodeQL setup
    # for it we need to inject the default CodeQL config into the forked action repository

    # todo: what if the action.yml indicates it runs in a docker image? Then we have not neccesarily a way to run CodeQL on actual CODE
    - uses: actions/github-script@v5
      name: Inject CodeQL workflow into new forked repository
      # todo: clear all other workflows first
      id: CodeQL
      env:
        repo: ${{needs.find-action-name.outputs.name}}
        org: rajbos-actions-test # todo: make central parameter
      with:      
        github-token: ${{ secrets.GH_TOKEN }}  
        script: |            
            const { repo, org } = process.env
            console.log(`Looking at this repository: [${org}/${repo}]`)

            const { readFileSync } = require('fs')
            const path = 'codeql-analysis.yml'
            const content = readFileSync(`${process.env.GITHUB_WORKSPACE}/${path}`)
            
            const targetPath = ".github/workflows/codeql-analysis.yml"
            console.log(`Checking to see if [${targetPath}] already exists in the forked repo`)
            
            // this call gives a 404, since the file does not exist, how to handle this?
            let data
            try {
               console.log(`before the call`)
               let { data } = await github.rest.repos.getContent({ 
                owner: org,
                repo,
                path: ".github/workflows/codeql-analysis.yml"  // todo: use variable here
              })
              console.log(`after the call`)

              console.log(`data:`)
              console.log(data)
              
              console.log(`data.content:`)
              console.log(data.content)
            }
            catch (e) {
              // strange: seems like we are not getting here at all :-(
              console.log(`in the catch with e:`)
              console.log(e)
            }
            console.log(`after the catch`)
            
            let content2
            if (data === undefined || data.content === undefined) {
              console.log('data is null, so workflow does not exist yet')
              content2 = content
            } else {
              console.log('data is not null, so does exist? We need to compare their hashes to see if we need to overwrite')
              content2 = Buffer.from(data.content.toString('base64'), 'base64')
              if (Buffer.from(data.content, 'base64').compare(content2) === 0) {
                console.log('data in the codeql workflow file is the same. Halting execution')
                return
              }
            }
                        
            console.log(`Uploading the CodeQL workflow to the forked repository`)
            github.rest.repos.createOrUpdateFileContents({
              owner: org,
              repo,
              path: targetPath,
              message: "Adding CodeQL setup",
              content: content2.toString('base64'),
              sha: data === undefined ? undefined : data.sha
            })

            console.log('CodeQL workflow uploaded')

            // todo: find the CodeQL workflow execution and wait for it to complete
            // todo: handle the result of the workflow execution: what if all languages fail?
            // todo: read the results from the CodeQL workflow
            // todo: generate random cron schedule?
